// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SF.Entities;
using Skuld;
using Skuld.DataSync;
using System;

namespace Skuld.DataSync.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SF.Core.CallPlans.Storage.DataModels.CallExpired", b =>
                {
                    b.Property<string>("Callable")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<string>("CallArgument")
                        .HasMaxLength(200);

                    b.Property<string>("CallError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("ExecCount");

                    b.Property<string>("ExecError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expired");

                    b.Property<DateTime?>("LastExecTime");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Callable");

                    b.ToTable("SysCallExpired");
                });

            modelBuilder.Entity("SF.Core.CallPlans.Storage.DataModels.CallInstance", b =>
                {
                    b.Property<string>("Callable")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<string>("CallArgument")
                        .HasMaxLength(200);

                    b.Property<string>("CallError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CallTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("DelaySecondsOnError");

                    b.Property<int>("ErrorCount");

                    b.Property<string>("ExecError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expire");

                    b.Property<DateTime?>("LastExecTime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Callable");

                    b.HasIndex("CallTime");

                    b.ToTable("SysCallInstance");
                });

            modelBuilder.Entity("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("ContainerId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("ImplementType")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<string>("ServiceIdent")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Setting");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("ImplementType");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceIdent");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.HasIndex("ContainerId", "ServiceType");

                    b.ToTable("SysServiceInstance");
                });

            modelBuilder.Entity("SF.Data.IdentGenerator.DataModels.IdentSeed", b =>
                {
                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<long>("NextValue");

                    b.Property<int>("Section");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Type");

                    b.ToTable("SysIdentSeed");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.Category", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Type", "Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.CategorySymbol", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("Category")
                        .HasMaxLength(100);

                    b.Property<string>("Symbol")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Type", "Category", "Symbol");

                    b.HasIndex("Type", "Symbol");

                    b.ToTable("CategorySymbols");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.CategoryType", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Name");

                    b.ToTable("CategoryTypes");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.Price", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20);

                    b.Property<int>("Interval");

                    b.Property<DateTime>("Time");

                    b.Property<float>("AdjustRate");

                    b.Property<float>("Close");

                    b.Property<float>("High");

                    b.Property<float>("Low");

                    b.Property<float>("Open");

                    b.Property<float>("Volume");

                    b.HasKey("Symbol", "Interval", "Time");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.PropertyGroup", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Name");

                    b.ToTable("PropertyGroups");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.PropertyItem", b =>
                {
                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Group", "Name");

                    b.ToTable("PropertyItems");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.Symbol", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ScopeCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.SymbolPropertyGroup", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20);

                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("NextUpdateTime");

                    b.Property<int>("RowCount");

                    b.Property<DateTime>("Time");

                    b.HasKey("Symbol", "Group");

                    b.ToTable("SymbolPropertyGroups");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.SymbolPropertyGroupHistory", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20);

                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Time");

                    b.Property<int>("RowCount");

                    b.HasKey("Symbol", "Group", "Time");

                    b.ToTable("SymbolPropertyGroupHistories");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.SymbolPropertyValue", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20);

                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<string>("Property")
                        .HasMaxLength(50);

                    b.Property<int>("Row");

                    b.Property<double?>("Number");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Symbol", "Group", "Property", "Row");

                    b.ToTable("SymbolPropertyValues");
                });

            modelBuilder.Entity("Skuld.DataStorages.Entity.Models.SymbolPropertyValueHistory", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20);

                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Time");

                    b.Property<string>("Property")
                        .HasMaxLength(50);

                    b.Property<int>("Row");

                    b.Property<double?>("Number");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Symbol", "Group", "Time", "Property", "Row");

                    b.ToTable("SymbolPropertyValueHistories");
                });

            modelBuilder.Entity("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", b =>
                {
                    b.HasOne("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId");
                });
#pragma warning restore 612, 618
        }
    }
}
